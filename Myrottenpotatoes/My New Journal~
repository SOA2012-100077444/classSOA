________________________________________________________________________________________________

CREATING A NEW APP./ APP. CREATION
________________________________________________________________________________________________ 

RAILS BASICS: FROM ZERO TO CRUD
-------------------------------
	STEP ONE

		~/Documents$ rails new Myrottenpotatoes -T

	STEP TWO

				Edit the Gemfile content (http://pastebin.com/AGMAxaag)

				For this first cd to Myrottenpotatoes

		~/Documents$ cd Myrottenpotatoes/
		~/Documents/Myrottenpotatoes$ vim Gemfile

				Press "esc" to stop editing, "shift+ZZ" to save and exit.

	STEP THREE

				Run "bundle install --without production" to checks if any gems specified in our Gemfile are missing and need to be installed.
		
		~/Documents/Myrottenpotatoes$ bundle install --without production

				The following message tells everything is fine (Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.)

				Start the app with rails server and point a browser to http://localhost:3000.

NOTE: At this level it's normal to have a routing error if we point the browser to http://localhost:3000/movies

				Type rake route to make sure that it prints nothing since there are no routes in our brand new app.

		~/Documents/Myrottenpotatoes$ rake routes


____________________________________________________________________________________________________________

CREATION OF RESTful ROUTES FOR CRUD./ ROUTING
____________________________________________________________________________________________________________
1. Edit config/routes.rb (content:http://pastebin.com/piLDY4eM)

	~/Documents/Myrottenpotatoes$ cd config/
	~/Documents/Myrottenpotatoes/config$ vim routes.rb 

		Delete "index.html" in public/index.html.

	~/Documents/Myrottenpotatoes$ cd public/
	~/Documents/Myrottenpotatoes/public$ rm index.html 
		run rake routes again
	~/Documents/Myrottenpotatoes$ rake routes

		    movies GET    /movies(.:format)          {:action=>"index", :controller=>"movies"}
			   POST   /movies(.:format)          {:action=>"create", :controller=>"movies"}
		 new_movie GET    /movies/new(.:format)      {:action=>"new", :controller=>"movies"}
		edit_movie GET    /movies/:id/edit(.:format) {:action=>"edit", :controller=>"movies"}
		     movie GET    /movies/:id(.:format)      {:action=>"show", :controller=>"movies"}
			   PUT    /movies/:id(.:format)      {:action=>"update", :controller=>"movies"}
			   DELETE /movies/:id(.:format)      {:action=>"destroy", :controller=>"movies"}
		      root        /                          {:to=>#<Proc:0xaf07a80@/usr/local/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0/lib/action_dispatch/routing/redirectionSTTING UP .rb:85 (lambda)>}


NOTE: web page will display "ActionController::RoutingError (uninitialized constant MoviesController):"

________________________________________________________________________________________________________

SETTING UP A DATABASE THAT WILL STORE THE MODELS./ INITIAL MIGRATION
________________________________________________________________________________________________________

DATABASES & MIGRATIONS
-------------------------
	~/Documents/Myrottenpotatoes$ rails generate migration create_movies
      
		invoke  active_record
      		create    db/migrate/20121106201202_create_movies.rb
 
	Edit the content with (http://pastebin.com/tmSkQX8b)

	~/Documents/Myrottenpotatoes$ cd db/migrate
	~/Documents/Myrottenpotatoes/db/migrate$ vim 20121106201202_create_movies.rb 
	~/Documents/Myrottenpotatoes/db/migrate$ rake db:migrate

		(in /home/ubuntu/Documents/Myrottenpotatoes)
		==  CreateMovies: migrating ===================================================
		-- create_table("movies")
		   -> 0.0014s
		==  CreateMovies: migrated (0.0016s) ==========================================

		Assuming the migration succeeded, update the test database's schema by running "rake db:test:prepare"

	~/Documents/Myrottenpotatoes/db/migrate$ rake db:test:prepare


NOTE: web page will display "RoutingError (uninitialized constant MoviesController):"

______________________________________________________________________________________________________

CREATING MODELS
_______________________________________________________________________________________________________

MODELS: ACTIVE RECORD BASICS
----------------------------

Create a file app/models/movie.rb containing just these two lines:(http://pastebin.com/PbFnAGt1)

	~/Documents/Myrottenpotatoes$ cd app/models/
	~/Documents/Myrottenpotatoes/app/models$ ls
	~/Documents/Myrottenpotatoes/app/models$ nano movie.rb
	~/Documents/Myrottenpotatoes/app/models$ ls
		movie.rb

Run rails console, which gives you an interactive Ruby prompt like irb(main):001.0> with the Rails framework and all of your application’s classes already loaded. They are some basic ActiveRecord features that create some movies in our database, searching for them, changing them, and deleting them (CRUD).

	~/Documents/Myrottenpotatoes$ rails console
		Loading development environment (Rails 3.1.0)

Here is the link containing the content to paste in the interactive Ruby prompt irb(main).(http://pastebin.com/2HETvZyz)


NOTE: web page will display "RoutingError (uninitialized constant MoviesController):"

___________________________________________________________________________________________________________

SEEDING THE DATABASE WITH SOME MOVIES
___________________________________________________________________________________________________________


Adding initial data to the database is called seeding, and is distinct from migrations, which are for managing changes to the schema. 

Copy the code here (http://pastebin.com/hNB7kpWz) into db/seeds.rb and run rake db:seed to run it.

	~/Documents/Myrottenpotatoes$ ls

		app        db       Gemfile.lock  My New Journal  README  Untitled Document 1~
		config     doc      lib           public          script  vendor
		config.ru  Gemfile  log           Rakefile        tmp

	~/Documents/Myrottenpotatoes$ cd db
	~/Documents/Myrottenpotatoes/db$ ls
		
		development.sqlite3  migrate  schema.rb  seeds.rb  test.sqlite3

	~/Documents/Myrottenpotatoes/db$ vim seeds.rb 
	~/Documents/Myrottenpotatoes/db$ rake db:seed
	
		(in /home/ubuntu/Documents/Myrottenpotatoes)

	~/Documents/Myrottenpotatoes/db$ 


NOTE: web page will display "RoutingError (uninitialized constant MoviesController):"

___________________________________________________________________________________________________________

CREATING SOME VIEWS TO SUPPORT THE CRUD ACTIONS
___________________________________________________________________________________________________________

CONTROLLERS & VIEWS
--------------------

NOTE: "index.html.haml" displayS a list of all movies, allowing us to click on each one
      "show .html.haml" displays details for the movie we click on.


To implement the Index RESTful action, we must define an index action in app/controllers/movies_controller.rb and a view template in app/views/movies/index.html.haml.

		movies_controller.rb (http://pastebin.com/KGWiEt09)

		index.html.haml (http://pastebin.com/Bz9fuk34)

Note: we need to create an intermediate directory "movies"(app/views/movies/).

	~/Documents/Myrottenpotatoes/db$ cd ../app/controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ ls
		application_controller.rb
	~/Documents/Myrottenpotatoes/app/controllers$ nano movies_controller.rb
	~/Documents/Myrottenpotatoes/app/controllers$ cd ../views/
	~/Documents/Myrottenpotatoes/app/views$ mkdir movies
	~/Documents/Myrottenpotatoes/app/views$ ls
		layouts  movies
	~/Documents/Myrottenpotatoes/app/views$ cd movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ nano index.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ 

Restart the application "rails server" in the app’s root directory and visit http://localhost:3000/movies/, the URI corresponding to the index action.


NOTE: This time it displays the liste of all movies on our web page. However when we click on the links the following error displays: "Unknown action: The action 'show' could not be found for MoviesController"

______________________________________________________________________________________________________________

PUSHING MY WORK TO GITHUB
______________________________________________________________________________________________________________

	~/Documents/Myrottenpotatoes/app/views/movies$ cd
	~$ cd Documents

	~/Documents$ git init

		Reinitialized existing Git repository in /home/ubuntu/Documents/.git/

	~/Documents$ git remote add origin https://github.com/SOA2012-100077444/classSOA.gitfatal: remote origin already exists.

	~/Documents$ git add Myrottenpotatoes

	~/Documents$ git commit -m "New Myrottenpotatoes"

		[master a21dc5f] New Myrottenpotatoes
 		Committer: saasbook <saasbook@saasbook.(none)>
		Your name and email address were configured automatically based
		on your username and hostname. Please check that they are accurate.
		You can suppress this message by setting them explicitly:

		    git config --global user.name "Your Name"
		    git config --global user.email you@example.com

		After doing this, you may fix the identity used for this commit with:

		    git commit --amend --reset-author

 		42 files changed, 1387 insertions(+)
 			
			[...]

	~/Documents$ git push origin master

		Username for 'https://github.com': SOA2012-100077444
		Password for 'https://SOA2012-100077444@github.com': 
		To https://github.com/SOA2012-100077444/classSOA.git
		  
		 9d503e9..a21dc5f  master -> master

	~/Documents$ 

__________________________________________________________________________________________________________

WRAPPING UP ALL THE VIEWS
__________________________________________________________________________________________________________

Delete the default content of the file app/views/layouts/application.html.erb created by the rails new
and replace it by the following (http://pastebin.com/0RU47cUy)

	~/Documents$ cd Myrottenpotatoes/app/views/layouts/
	~/Documents/Myrottenpotatoes/app/views/layouts$ vim application.html.erb 
	~/Documents/Myrottenpotatoes/app/views/layouts$ ls

		application.html.erb

Save this file as app/views/layouts/application.html.haml and delete the existing application.html.erb in that directory.

	~/Documents/Myrottenpotatoes/app/views/layouts$ mv application.html.erb application.html.haml
	~/Documents/Myrottenpotatoes/app/views/layouts$ ls

		application.html.haml

	~/Documents/Myrottenpotatoes/app/views/layouts$ 

NOTE: The app/views/layouts/application.html.haml template is used to “wrap” action views by default, using yield.

___________________________________________________________________________________________________________


In app/controllers/movies_controller.rb, paste this content (http://pastebin.com/TESrHmkk)

	~/Documents/Myrottenpotatoes/app/views$ cd ../controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ ls

		application_controller.rb  movies_controller.rb

	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
	~/Documents/Myrottenpotatoes/app/controllers$ 


In in app/views/movies/show.html.haml, paste (http://pastebin.com/hnmsYYB5)

Note: The file "show.html.haml must be created.

	~/Documents/Myrottenpotatoes/app/controllers$ cd ../views/movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ ls

		index.html.haml

	~/Documents/Myrottenpotatoes/app/views/movies$ nano show.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ ls

		index.html.haml  show.html.haml

	~/Documents/Myrottenpotatoes/app/views/movies$


NOTE: At this level our web page displays the liste of all movies and active links.

_____________________________________________________________________________________________________________

CSS STYLING
______________________________________________________________________________________________________________

Copy the simple CSS styling herein (http://pastebin.com/LsLngdin) into app/assets/stylesheets/application.css.

	~/Documents/Myrottenpotatoes/app/views/movies$ cd ..
	~/Documents/Myrottenpotatoes/app/views$ cd ../assets/stylesheets/
	~/Documents/Myrottenpotatoes/app/assets/stylesheets$ vim application.css 
	~/Documents/Myrottenpotatoes/app/assets/stylesheets$

NOTE: Our web page display is nicer. There a new format of the display.

_______________________________________________________________________________________________________________

ADDING MORE FUNCTIONALITIES/ THE FILL-IN FORM
_______________________________________________________________________________________________________________

A. NEW & CREATE
----------------

To add the functionality ’Add new movie’, we must do the following:

	add (http://pastebin.com/6wLiit6M)to the end of index.html.haml (in app/views/movies/)
	add (http://pastebin.com/uFdnJNmB) to movies_controller.rb (in app/controllers/)
	create a file "new.html.haml" in app/views/movies/new.html.haml and paste (http://pastebin.com/w7jdzawW)

	~/Documents/Myrottenpotatoes/app/assets$ cd ../views/movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ ls

		index.html.haml  show.html.haml

	~/Documents/Myrottenpotatoes/app/views/movies$ vim index.html.haml 
	~/Documents/Myrottenpotatoes/app/views/movies$ cd ..
	~/Documents/Myrottenpotatoes/app/views$ cd ../controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ ls

		application_controller.rb  movies_controller.rb

	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
	~/Documents/Myrottenpotatoes/app/controllers$ cd ..
	~/Documents/Myrottenpotatoes/app$ cd views/movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ nano new.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ ls

		index.html.haml  new.html.haml  show.html.haml

	~/Documents/Myrottenpotatoes/app/views/movies$ 


NOTE: The function "Add New Movie" is added to our web page

___________________________________________________________________________________________________________________________

REDIRECTING & Flash
___________________________________________________________________________________________________________________________

A. REDIRECTING
--------------

Instead of creating a view in "app/views/movies/create.html.haml" containing a nice message informing the user of success, what most web apps do is return the user to a more useful page — say, the home page, or the list of all movies—but they display a success message as an added element on that page to let the user know that their changes were successfully saved.

Rails makes it easy to implement this behavior. To send the user to a different page, "redirect_to" causes a controller action to end not by rendering a view, but by restarting a whole new request to a different action.


To do it, modify movies_controller.rb in "Myrottenpotatoes/app/controllers" (http://pastebin.com/FFgBP1Jy)

 
	~/Documents/Myrottenpotatoes/app/views/movies$ cd ..
	~/Documents/Myrottenpotatoes/app/views$ cd ../controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
	~/Documents/Myrottenpotatoes/app/controllers$ 


Now, test out this behavior by reloading the movie listing page, clicking Add New Movie, and submitting the form.


NOTE: Successfully add and save changes, then brings us back on the listing page of movies.
 
_____________________________________________________________________________________________________________________________

B. FLASH
------------

The flash is a special method that quacks like a hash, but persists from the current request to the next.  
By convention, flash[:notice] is used for informational messages and flash[:warning] is used for messages about things going wrong.

To do it, modify (add) movies_controller.rb in "Myrottenpotatoes/app/controllers" (http://pastebin.com/N1n4Pkr0)

	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
	~/Documents/Myrottenpotatoes/app/controllers

NOTE: What happened? Even though creating a new movie appears to work (the new movie shows up in the list of all movies), there’s no sign of the helpful message we just created. That’s because we didn’t actually modify any of the views to display that message!


But which view should we modify for it to happen?

The answer is "application.html.haml" the template used to “wrap” all views by default in app/views/layouts/.
Add the four lines of code in (http://pastebin.com/bW1FzEr1) between "%body" and "=yield" to display any pending flash messages at the beginning of the page body.

	~/Documents/Myrottenpotatoes/app/controllers$ cd ../views/layouts/
	~/Documents/Myrottenpotatoes/app/views/layouts$ vim application.html.haml 
	~/Documents/Myrottenpotatoes/app/views/layouts$ 

NOTE: THE WARNING MESSAGES DO NOT DISPLAY

____________________________________________________________________________________________________________________________________________

FINISHING CRUD: EDIT/UPDATE AND DESTROY
_____________________________________________________________________________________________________________________________________________

A. EDIT/UPDATE
---------------

Like create, this requires two actions:
	1.To display the form with editable information (edit) 
	2. To accept the form submission and apply the updated information (update).


Modify the show.html.haml view so its last two lines match the code within (http://pastebin.com/ZD1y6TYc):

	~/Documents/Myrottenpotatoes/app/views/layouts$ cd ../movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ vim show.html.haml 
	~/Documents/Myrottenpotatoes/app/views/movies$ 

Create a new file "edit.html.haml" in /app/views/movies/ with (http://pastebin.com/PhapSLEN)

Here are the actual controller methods we need to add to movies_controller.rb (http://pastebin.com/jdTS5P7Q)

	~/Documents/Myrottenpotatoes/app/views/movies$ ls

		index.html.haml  new.html.haml  show.html.haml

	~/Documents/Myrottenpotatoes/app/views/movies$ nano edit.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ rake routes

		(in /home/ubuntu/Documents/Myrottenpotatoes)

		    movies GET    /movies(.:format)          {:action=>"index", :controller=>"movies"}
			   POST   /movies(.:format)          {:action=>"create", :controller=>"movies"}
		 new_movie GET    /movies/new(.:format)      {:action=>"new", :controller=>"movies"}
		edit_movie GET    /movies/:id/edit(.:format) {:action=>"edit", :controller=>"movies"}
		     movie GET    /movies/:id(.:format)      {:action=>"show", :controller=>"movies"}
			   PUT    /movies/:id(.:format)      {:action=>"update", :controller=>"movies"}
			   DELETE /movies/:id(.:format)      {:action=>"destroy", :controller=>"movies"}
		      root        /                          {:to=>#<Proc:0xa8f11a0@/usr/local/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0/lib/action_dispatch/routing/redirection.rb:85 (lambda)>}

	~/Documents/Myrottenpotatoes/app/views/movies$ cd ..
	~/Documents/Myrottenpotatoes/app/views$ cd ../controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
	~/Documents/Myrottenpotatoes/app/controllers$ 
 

___________________________________________________________________________________________________________________

B. DESTROY
-----------

Add the following lines to /app/controllers/movies_controller.rb to make it happen: (http://pastebin.com/8ZYbFUcb)

	~/Documents/Myrottenpotatoes/app/views/movies$ cd ..
	~/Documents/Myrottenpotatoes/app/views$ cd ../controllers/
	~/Documents/Myrottenpotatoes/app/controllers$ vim movies_controller.rb 
 
Add the following lines to /app/views/movies$ vim show.html.haml: (http://pastebin.com/Cr8EXQaH)

	~/Documents/Myrottenpotatoes/app/controllers$ cd ..
	~/Documents/Myrottenpotatoes/app$ cd views/movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ vim show.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ 

NOTE that this adds a link for deletion. 
     To create a button for deletion input instead the following (http://pastebin.com/mTXuE5up)

	~/Documents/Myrottenpotatoes/app$ cd views/movies/
	~/Documents/Myrottenpotatoes/app/views/movies$ vim show.html.haml
	~/Documents/Myrottenpotatoes/app/views/movies$ 

NOTE: Type "button_to" with we need buttons and "link_to" if we need links

NOTE: I created an untitled movie in the list that cannot be deleted.

__________________________________________________________________________________________________________________

PUSHING TO GITHUB
__________________________________________________________________________________________________________________

	~/Documents$ git init

		Reinitialized existing Git repository in /home/ubuntu/Documents/.git/

	~/Documents$ git add Myrottenpotatoes

	~/Documents$ git commit -m "Updates"

		[master 7097ebd] Updates

 		Committer: saasbook <saasbook@saasbook.(none)>
		Your name and email address were configured automatically based
		on your username and hostname. Please check that they are accurate.
		You can suppress this message by setting them explicitly:

		    git config --global user.name "Your Name"
		    git config --global user.email you@example.com

		After doing this, you may fix the identity used for this commit with:

    		git commit --amend --reset-author

		 10 files changed, 713 insertions(+), 1 deletion(-)
		 create mode 100644 Myrottenpotatoes/app/views/layouts/application.html.haml
		 create mode 100644 Myrottenpotatoes/app/views/movies/edit.html.haml
		 create mode 100644 Myrottenpotatoes/app/views/movies/new.html.haml
		 create mode 100644 Myrottenpotatoes/app/views/movies/show.html.haml
		 create mode 100644 Myrottenpotatoes/app/views/movies/show.html.haml~

	~/Documents$ git push origin master

		Username for 'https://github.com': SOA2012-100077444
		Password for 'https://SOA2012-100077444@github.com': 
		To https://github.com/SOA2012-100077444/classSOA.git
		   
			a21dc5f..7097ebd  master -> master

	~/Documents$ 

_____________________________________________________________________________________________________________________

DELETING FILES FROM GITHUB
_____________________________________________________________________________________________________________________

Here are the steps I followed to delete my old version of "myrottenpotatoes" file.

	~/Documents$ git init

	~/Documents$ git add myrottenpotatoes/

	~/Documents$ git rm -r myrottenpotatoes/

	~/Documents$ git commit -m "changes"

	~/Documents$ git push origin master 

	~/Documents$ 

______________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________

RUNNING CUCUMBER AND CAPYBARA
______________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________

DECLARING THAT OUR APP. DEPENDS ON THE GEM.
_______________________________________________________________________________________________________________________

Add the following lines (http://pastebin.com/MMZdRmB3) to Gemfile in /Documents/Myrottenpotatoes/

Once the Gemfile modified, we must run "bundle install --without production". If all goes well it'll show “Your bundle is complete.”


	~/Documents/Myrottenpotatoes$ rails generate cucumber:install capybara
		WARNING: Cucumber-rails required outside of env.rb.  The rest of loading is being defered until env.rb is called.
		  To avoid this warning, move 'gem cucumber-rails' under only group :test in your Gemfile
		      create  config/cucumber.yml
		      create  script/cucumber
		       chmod  script/cucumber
		      create  features/step_definitions
		      create  features/support
		      create  features/support/env.rb
		       exist  lib/tasks
		      create  lib/tasks/cucumber.rake
			gsub  config/database.yml
			gsub  config/database.yml
		       force  config/database.yml
	~/Documents/Myrottenpotatoes$ rails generate cucumber_rails_training_wheels:install
		WARNING: Cucumber-rails required outside of env.rb.  The rest of loading is being defered until env.rb is called.
		  To avoid this warning, move 'gem cucumber-rails' under only group :test in your Gemfile
		       exist  features/step_definitions
		      create  features/step_definitions/web_steps.rb
		       exist  features/support
		      create  features/support/paths.rb
		      create  features/support/selectors.rb
	~/Documents/Myrottenpotatoes$ 

____________________________________

INITIALIZING THE TEST DATABASE
____________________________________

Run "rake db:test:prepare"

PROBLEM: "rake db:test:prepare" command not found.

SOLUTION:

	~/Documents/classSOA/Myrottenpotatoes$ sudo gem install test-unit-runner-gtk2

	~/Documents/Myrottenpotatoes$ bundle install --without production

	~/Documents/Myrottenpotatoes$ rails generate cucumber:install capybara
   
	~/Documents/Myrottenpotatoes$ rails generate cucumber_rails_training_wheels:install
       
	~/Documents/Myrottenpotatoes$ rake db:test:prepare

	~/Documents/Myrottenpotatoes$ 

NOTE: It returns nothing. So everything is fine
___________________________________________________________________________________________________________________________________________

Create a new file in /Myrottenpotatoes/features named "AddMovie.feature" and paste in (http://pastebin.com/mqQncg1s)

Run cucumber

	~/Documents/Myrottenpotatoes$ cucumber

		"You have already activated activesupport 3.2.8, but your Gemfile requires activesupport 3.1.0. Using bundle exec may solve this. (Gem::LoadError)"

PROBLEM RUNNING CUCUMBER
	
	Gem::LoadError
	
SOLUTION:
	~/Documents/Myrottenpotatoes$ bundle exec cucumber

	~/Documents/Myrottenpotatoes$ 

NOTE: Always use "bundle exec cucumber" to run cucumber. We can delete the delete our rails3tutorial gemset and re-create it again with the following:

	rvm gemset delete rails3tutorial
	rvm 1.9.2-p290@rails3tutorial --create

But using "bundle exec cucumber" is in case we have multiple projects, and probably many different versions of many different gems. we should always use bundle exec to do things like execute rake tasks, run cucumer features and other unit tests, etc.


Create a file features/search_tmdb.feature containing this code(http://pastebin.com/Qc4rppVL).
 
	~/Documents/Myrottenpotatoes$ cd features/
	~/Documents/Myrottenpotatoes/features$ ls
		AddMovie.feature  step_definitions  support
	~/Documents/Myrottenpotatoes/features$ nano search_tmdb.feature
..
	~/Documents/Myrottenpotatoes$ bundle exec cucumber
		Using the default profile...
		Feature: User can manually add movie

		  Scenario: Add a movie                              # features/AddMovie.feature:3
		    Given I am on the RottenPotatoes home page       # features/step_definitions/web_steps.rb:44
		    When I follow "Add new movie"                    # features/step_definitions/web_steps.rb:56
		    Then I should be on the Create New Movie page    # features/step_definitions/web_steps.rb:230
		    When I fill in "Title" with "Men In Black"       # features/step_definitions/web_steps.rb:60
		    And I select "PG-13" from "Rating"               # features/step_definitions/web_steps.rb:85
		    And I press "Save Changes"                       # features/step_definitions/web_steps.rb:52
		    Then I should be on the RottenPotatoes home page # features/step_definitions/web_steps.rb:230
		    And I should see "Men In Black"                  # features/step_definitions/web_steps.rb:105

			[...]

		2 scenarios (1 failed, 1 passed)
		14 steps (1 failed, 4 skipped, 9 passed)
		0m2.088s

_________________________________________________________________________________________________________________________________________

CREATING THE SAD PATH
________________________________________________________________________________________________________________________________________

	~/Documents/Myrottenpotatoes$ 

Then do the following 3 things:

	1. Add the following code to end of app/views/movies/index.html.haml (http://pastebin.com/viZTPxGN)
	2. Add to movies_controller.rb, anywhere inside (http://pastebin.com/yVNvBKNe)
	3. Add to routes.rb, just before or just after ’resources :movies’ (http://pastebin.com/tCHwFER8)

NOTE 1: Line 3 is the text that allows Then I should see “Search TMDb for a movie” to pass.The remaining lines create the fill-in form;

NOTE 2: Two things are worth noting. First, as with any user interaction in a view, we need a controller action that will handle that interaction. In this case the interaction is submitting the form with search keywords. Line 5 says that when the form is submitted, the controller action search_tmdb will receive the form submission. That code doesn’t exist yet, so we had to choose a descriptive name for the action. The second thing to note is the use of the HTML label tag. Figure 2.14 in Chapter 2 tells us that lines 7 and 8 will expand to the following HTML markup.


Then run cucumber

	~/Documents/Myrottenpotatoes$ bundle exec cucumber
		Using the default profile...
		Feature: User can manually add movie

		  Scenario: Add a movie                              # features/AddMovie.feature:3
		    Given I am on the RottenPotatoes home page       # features/step_definitions/web_steps.rb:44
		    When I follow "Add new movie"                    # features/step_definitions/web_steps.rb:56
		    Then I should be on the Create New Movie page    # features/step_definitions/web_steps.rb:230
		    When I fill in "Title" with "Men In Black"       # features/step_definitions/web_steps.rb:60
		    And I select "PG-13" from "Rating"               # features/step_definitions/web_steps.rb:85
		    And I press "Save Changes"                       # features/step_definitions/web_steps.rb:52
		    Then I should be on the RottenPotatoes home page # features/step_definitions/web_steps.rb:230
		    And I should see "Men In Black"                  # features/step_definitions/web_steps.rb:105

		Feature: User can add movie by searching for it in The Movie Database (TMDb)
		  
		  As a movie fan
		  So that I can add new movies without manual tedium
		  I want to add movies by looking up their details in TMDb

		  Scenario: Try to add nonexistent movie (sad path)                       # features/search_tmdb.feature:7
		    Given I am on the RottenPotatoes home page                            # features/step_definitions/web_steps.rb:44
		    Then I should see "Search TMDb for a movie"                           # features/step_definitions/web_steps.rb:105
		    When I fill in "Search Terms" with "Movie That Does Not Exist"        # features/step_definitions/web_steps.rb:60
		    And I press "Search TMDb"                                             # features/step_definitions/web_steps.rb:52
		    Then I should be on the RottenPotatoes home page                      # features/step_definitions/web_steps.rb:230
		    And I should see "'Movie That Does Not Exist' was not found in TMDb." # features/step_definitions/web_steps.rb:105

		2 scenarios (2 passed)
		14 steps (14 passed)
		0m1.956s

NOTE: Below a long string of information, the first line mentionning an argument error. Is it fine to disregard it?

		/usr/local/lib/ruby/gems/1.9.1/gems/cucumber-rails-1.3.0/lib/cucumber/rails/world.rb:13:in `initialize': wrong number of arguments (1 for 0) (ArgumentError)
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/testsuitecreator.rb:38:in `new'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/testsuitecreator.rb:38:in `append_test'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/testsuitecreator.rb:32:in `create'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/testcase.rb:138:in `suite'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:60:in `block in add_test_case'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:59:in `each'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:59:in `add_test_case'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:35:in `block in add_test_cases'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:34:in `each'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector.rb:34:in `add_test_cases'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/collector/descendant.rb:13:in `collect'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/autorunner.rb:83:in `block in <class:AutoRunner>'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/autorunner.rb:386:in `[]'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/autorunner.rb:386:in `run'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit/autorunner.rb:58:in `run'
			from /usr/local/lib/ruby/gems/1.9.1/gems/test-unit-2.5.2/lib/test/unit.rb:501:in `block in <top (required)>'


NOTE: PUSHING TO GITHUB.

NOTE 2: Our web page was added new features."Search TMDb for a movie" and "Search Terms"

WASH CUCUMBER PART 2 SCREENCAST ________________________________________________________________________________________________________________________________________

CREATING THE HAPPY PATH
________________________________________________________________________________________________________________________________________

Modify features/search_tmdb.feature to match the figure and once again run cucumber.

Mapping error occured. To solve it, as per cucumber part 2 screencast, we copy here "the 'Search Results' page", paste it in path.rb and do the mapping difining the routes, here '/movies'.

Add (http://pastebin.com/JQkEUVDJ) to AddMovie.feature in Myrottenpotatoes/features/

	~/Documents/Myrottenpotatoes/features$ vim AddMovie.feature 
	~/Documents/Myrottenpotatoes/features$

































